

/**
 * @type {Jumbo.Ioc.DIContainer}
 */
var diCotainer = Jumbo.Ioc.DIContainer.instance;

/**
 * @memberOf Jumbo.Ioc
 */
class Scope {

	//<editor-fold desc="Ctor">

	constructor() {
		/**
		 * Instances saved under name of dependency
		 * @private
		 * @type {{}}
		 */
		this.instances = {};
	}

	//</editor-fold>

	//<editor-fold desc="Public Methods">

	/**
	 * Resolve arguments for Type with given name
	 * @param {String} name
	 * @returns {resolveArgumentsResult} Returns object with resolved arguments and looked up type
	 * @throws {Error} If no type under name exists or if registered type isn't class
	 */
	resolveArguments(name) {
		diCotainer.resolveArguments(name, this);
	}

	/**
	 * Resolve instance of Type registered under given name
	 * @param {String} name
	 */
	resolve(name) {
		return diCotainer.resolve(name, this);
	}

	resolveUnregistered(type) {
		return diCotainer.resolveUnregistered(type, this);
	}
}

module.exports = Scope;