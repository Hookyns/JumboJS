const Jumplate = require("jumbo-template");

//<editor-fold desc="Helpers">

/**
 * LINK helper
 * Create application link
 */
Jumplate.registerHelper("link", function (controller, action, slashParams, queryParams, lang) {
	if (!lang) {
		lang = this.request.language;
	}

	return Jumbo.Application.Locator.prototype.generateUrl.call(Jumbo.Application.Locator.instance,
		controller, action, slashParams, queryParams, null, lang);
});

/**
 * APPLINK helper
 * Create application link targeted to subbapp
 */
Jumplate.registerHelper("applink", function (subApp, controller, action, slashParams, queryParams, lang) {
	if (!lang) {
		lang = this.request.language;
	}

	return Jumbo.Application.Locator.prototype.generateUrl.call(Jumbo.Application.Locator.instance,
		controller, action, slashParams, queryParams, subApp, lang);
});

/**
 * FORM helper
 */
Jumplate.registerBlockHelper("form", function (content) {
	return '<form method="POST" action="#" enctype="multipart/form-data">' + content + '</form>';
});


Jumplate.registerLocalizator(function (key) {
	console.log("Implement localizator in TemplateAdapter!");
	return key;
});

//</editor-fold>

/**
 * Integrated template adapter for Jumplate
 * @memberOf Jumbo.Adapters
 */
var TemplateAdapter = {

	render: function render(templatePath, layoutPath, data, context, callback) {
		var template = new Jumplate(null, templatePath, null, layoutPath);
		template.context = context;
		template.compile(function (err) {
			if (err) {
				callback(err);
				return;
			}

			template.render(data, function (err, output) {
				if (err) {
					callback(err);
					return;
				}

				callback(null, output);
			});
		});
	},

	preCompile: function preCompile(templatePath, layoutPath, callback) {
		var template = new Jumplate(null, templatePath, null, layoutPath);
		template.compile(function (err, preCompiledTemplate) {
			if (err) {
				callback(err);
				return;
			}

			callback(null, preCompiledTemplate);
		});
	},

	renderPreCompiled: function renderPreCompiled(compiledTemplate, data, context, callback) {
		var template = Jumplate.fromCache(compiledTemplate);
		template.context = context;
		template.render(data, function (err, output) {
			if (err) {
				callback(err);
				return;
			}

			callback(null, output);
		});
	},

	/**
	 * Extension of template files
	 */
	extension: ".tpl",

	/**
	 * You implement preCompile and renderPreCompiled methods
	 */
	preCompilation: true
};

module.exports = TemplateAdapter;