/**
 * This file is part of Jumbo framework for Node.js
 * Written by Roman JÃ¡mbor
 */

$path = require("path");

"use strict";

var instance = null;

/**
 * Provide access to all controllers and actions i application. Contain verifications and constructions methods.
 * @class
 * @static
 * @memberOf Jumbo.Application
 */
class ControllerFactory {

	//<editor-fold desc="Static Properties">

	/**
	 * Get instance of ControllerFactory
	 * @return {ControllerFactory}
	 */
	static get instance() {
		if (instance == null) {
			instance = Reflect.construct(ControllerFactory, [], ControllerFactoryActivator);
		}

		return instance;
	}

	//</editor-fold>

	//<editor-fold desc="Ctor">

	constructor() {
		if (new.target != ControllerFactoryActivator) {
			throw new Error("You cannot call private constructor!");
		}

		/**
		 * List of controllers with lowercase names
		 * @type {Object.<{name: String, actions:Object<String>}>}
		 */
		this.controllers = {
			// "examplecontroller": {
			// 	name: "ExampleController",
			//  args: ["arguments", "of", "constructor"],
			// 	action: {
			// 		actionexample: {
			// 			name: "actionExample",
			// 			args: ["arguments", "in", "action"]
			// 		},
			// 	}
			// }
		};


		/**
		 * List of sub-apps witch their controllers and actions
		 * @type {Object.<Object.<{name: String, dir:String, controllers: Object.<{name: String, actions:Object<String>}>}>>}
		 */
		this.subApp = {
			// "examplesubapp": {
			// 	name: "ExampleSubApp",
			// 	dir: "example-sub-app",
			// 	controllers: {
			// 		examplecontroller: {
			// 			name: "ExampleController",
			//          args: ["arguments", "of", "constructor"],
			// 			actions: {
			// 				"actionexample": {
			// 					name: "actionExample",
			// 					args: ["arguments", "in", "action"]
			// 				},
			// 			}
			// 		}
			// 	}
			// }
		};


		this.loadControllersAndActionNames();
		this.loadSubAppsControllersAndActionNames();
		this.clearRequireCache();
	}

	//</editor-fold>

	//<editor-fold desc="Public Methods">

	/**
	 * Get ID name of action
	 * @param {String} actionName
	 * @returns {string}
	 */
	getActionId(actionName) {
		return "action" + actionName.toLowerCase();
	}

	/**
	 * Get ID name of controller
	 * @param {String} controllerName
	 * @returns {string}
	 */
	getControllerId(controllerName) {
		return controllerName.toLowerCase() + "controller";
	}

	/**
	 * Return full controller name
	 * @param {String} controllerName Controller name
	 * @returns {String | null} Returns full name or null if not exists
	 */
	getControllerName(controllerName) {
		controllerName = this.getControllerId(controllerName);
		return this.controllers[controllerName] ? this.controllers[controllerName].name : null;
	}

	/**
	 * Return full name of action in specified controller
	 * @param {String} controllerName
	 * @param {String} actionName
	 * @returns {String | null}
	 */
	getActionName(controllerName, actionName) {
		controllerName = this.getControllerId(controllerName);
		actionName = this.getActionId(actionName);

		return (this.controllers[controllerName] && this.controllers[controllerName].actions[actionName])
			? this.controllers[controllerName].actions[actionName].name : null;
	}

	/**
	 * Create new instace of specified controller
	 * @param {String} controllerName
	 * @returns {Jumbo.Base.Controller | null}
	 * @throws {Error} If controller doesn't exists
	 */
	createController(controllerName, scope) {
		// Get controller's name
		controllerName = this.getControllerName(controllerName);

		// Verify cntrl existance
		if (!controllerName) throw new Error(`Controller '${controllerName}' cannot be created, it doens't exists.`);

		// Get controller
		var Controller = App.Controllers[controllerName];

		// Resolve
		return scope.resolveUnregistered(Controller);
	}

	/**
	 * Return name of sub-app
	 * @param {String} subApp
	 * @returns {String | null}
	 */
	getSubAppName(subApp) {
		subApp = subApp.toLowerCase();
		return this.subApp[subApp] ? this.subApp[subApp].name : null;
	}

	/**
	 * Get informations about sub-app
	 * @param {String} subAppName
	 * @return {{name: String, dir: String} | null}
	 */
	getSubAppInfo(subAppName) {
		var subApp = this.subApp[subAppName.toLowerCase()];

		return subApp ? {
			name: subApp.name,
			dir: subApp.dir
		} : null;
	}

	/**
	 * Return name of controller in sub-app
	 * @param {String} subApp
	 * @param {String} controllerName
	 * @returns {String | null}
	 */
	getSubAppControllerName(subApp, controllerName) {
		controllerName = this.getControllerId(controllerName);
		return this.subApp[subApp] && this.subApp[subApp].controllers[controllerName]
			? this.subApp[subApp].controllers[controllerName].name : null;
	}

	/**
	 * Return name of action in sub-app controller
	 * @param {String} subApp
	 * @param {String} controllerName
	 * @param {String} actionName
	 * @returns {String | null}
	 */
	getSubAppActionName(subApp, controllerName, actionName) {
		controllerName = this.getControllerId(controllerName);
		actionName = this.getActionId(actionName);

		return this.subApp[subApp] && this.subApp[subApp].controllers[controllerName]
		&& this.subApp[subApp].controllers[controllerName].actions[actionName]
			? this.subApp[subApp].controllers[controllerName].actions[actionName].name : null;
	}

	/**
	 * Create new instance of sub-app controller
	 * @param {String} subApp
	 * @param {String} controllerName
	 * @returns {Controller | null}
	 */
	createSubAppController(subApp, controllerName, scope) {
		controllerName = this.getSubAppControllerName(subApp, controllerName);

		// Verify cntrl existance
		if (!controllerName) throw new Error(`Controller '${controllerName}' cannot be created, it doens't exists.`);

		subApp = this.getSubAppName(subApp);

		// Verify subapp existance
		if (!subApp) throw new Error(`Controller '${controllerName}' cannot be created, subapp ${subApp} doens't exists.`);

		var Controller = App.SubApps[subApp].Controllers[controllerName];

		return scope.resolveUnregistered(Controller);
	}

	/**
	 * Test if controller and action exist
	 * @param {String} controllerName
	 * @param {String} actionName
	 * @param {object} [subApp]
	 * @returns {boolean}
	 */
	controllerAndActionExist(controllerName, actionName, subApp) {
		controllerName = this.getControllerId(controllerName);
		actionName = this.getActionId(actionName);

		if (subApp) {
			if (!this.subApp[subApp]) return new Error(`Subapp '${subApp}' doesn't exists.`);
			if (!this.subApp[subApp].controllers[controllerName]) return new Error(`Controller '${controllerName}' doesn't exists.`);
			if (!this.subApp[subApp].controllers[controllerName].actions[actionName])
				return new Error(`Action '${actionName}' doesn't exists in ${controllerName}.`);
			return true;
		}

		if (!this.controllers[controllerName]) return new Error(`Controller '${controllerName}' doesn't exists.`);
		if (!this.controllers[controllerName].actions[actionName])
			return new Error(`Action '${actionName}' doesn't exists in ${controllerName}.`);
		return true;
	}

	//</editor-fold>

	//<editor-fold desc="Private Methods">

	/**
	 * Take function and return list of it's arguments
	 * @param {Function} func
	 * @returns {Array}
	 */
	getFunctionArgsList(func) {
		var matchArgs = func.toString().match(/^[\s\S]*?\(([\s\S]*?)\)/);

		var args = [];

		if (matchArgs) {
			args = matchArgs[1].replace(/\s/g, "").split(",");

			if (args.length == 1 && args[0] == "") {
				args = [];
			}
		}

		return args;
	}

	/**
	 * Take constrcutor and return list of it's arguments
	 * @param {Function} func
	 * @returns {Array}
	 */
	getConstructorArgsList(func) {
		var matchArgs = func.toString().match(/^[\s\S]*?constructor\s*\(([\s\S]*?)\)/);

		var args = [];

		if (matchArgs) {
			args = matchArgs[1].replace(/\s/g, "").split(",");

			if (args.length == 1 && args[0] == "") {
				args = [];
			}
		}

		return args;
	}

	/**
	 * Walk through App.Controllers namespace and load all Controllers and list all their actions
	 * @private
	 */
	loadControllersAndActionNames() {
		var objs = Object.getOwnPropertyNames(App.Controllers);
		var c = objs.length;
		var controller;

		for (var p = 0; p < c; p++) {
			controller = objs[p].toLowerCase();

			if (App.Controllers[objs[p]].prototype == undefined) {
				Jumbo.Logging.Log.error(`App.Controllers.${objs[p]} doesn't export class.`);
				continue;
			}

			// Create object for controller
			this.controllers[controller] = {
				name: objs[p],
				args: this.getConstructorArgsList(App.Controllers[objs[p]].prototype.constructor),
				actions: {}
			};

			// Load actions
			for (var action of Reflect.ownKeys(App.Controllers[objs[p]].prototype)) {
				if (action.substr(0, 6) == "action") {
					var args = this.getFunctionArgsList(App.Controllers[objs[p]].prototype[action]);

					this.controllers[controller].actions[action.toLowerCase()] = {
						name: action,
						args: args
					};
				}
			}
		}
	}

	/**
	 * Walk through App.SuApps, discover all subApps and their controllers and actions
	 * @private
	 */
	loadSubAppsControllersAndActionNames() {
		var subApps = Object.getOwnPropertyNames(global.App.SubApps);
		var sc = subApps.length;
		var subApp;

		for (var sp = 0; sp < sc; sp++) {
			var objs = Object.getOwnPropertyNames(global.App.SubApps[subApps[sp]].Controllers);
			subApp = subApps[sp].toLowerCase();

			// Create object for sub-app
			this.subApp[subApp] = {
				name: subApps[sp],
				dir: subApps[sp].charAt(0).toLowerCase() + subApps[sp].substr(1).replace(/[A-Z]/g, function (char) {
					return "-" + char.toLowerCase();
				}),
				controllers: {}
			};

			var c = objs.length;
			var controller;

			for (var p = 0; p < c; p++) {
				controller = objs[p].toLowerCase();

				if (App.SubApps[subApps[sp]].Controllers[objs[p]].prototype == undefined) {
					Jumbo.Logging.Log.error(`App.Controllers.SubApps.${subApps[sp]}.${objs[p]} doesn't export class.`);
					continue;
				}

				// Create object for controller
				this.subApp[subApp].controllers[controller] = {
					name: objs[p],
					args: this.getConstructorArgsList(App.SubApps[subApps[sp]].Controllers[objs[p]].prototype.constructor),
					actions: {}
				};

				// LoadActions
				for (var action of Reflect.ownKeys(App.SubApps[subApps[sp]].Controllers[objs[p]].prototype)) {
					if (action.substr(0, 6) == "action") {
						var args = this.getFunctionArgsList(App.SubApps[subApps[sp]].Controllers[objs[p]].prototype[action]);

						this.subApp[subApp].controllers[controller].actions[action.toLowerCase()] = {
							name: action,
							args: args
						};
					}
				}
			}
		}
	}

	/**
	 * Above procedures required classes so this procedure will clear cache
	 * @private
	 */
	clearRequireCache() {
		var req = require("../utils/require");
		var objs = Object.getOwnPropertyNames(global.App.Controllers);
		var c = objs.length;

		for (var p = 0; p < c; p++) {
			req.uncache($path.join(Jumbo.APP_DIR, "controllers", objs[p]));
		}

		var subApps = Object.getOwnPropertyNames(global.App.SubApps);
		var sc = subApps.length;

		for (var sp = 0; sp < sc; sp++) {
			objs = Object.getOwnPropertyNames(global.App.SubApps[subApps[sp]].Controllers);
			c = objs.length;

			for (p = 0; p < c; p++) {
				req.uncache($path.join(Jumbo.SUB_APP_DIR, this.subApp[subApps[sp].toLowerCase()].dir, "controllers", objs[p]));
			}
		}
	}

	//</editor-fold>
}

/**
 * Activator used for creating instance of ControllerFactory
 */
class ControllerFactoryActivator extends ControllerFactory { }

module.exports = ControllerFactory;
